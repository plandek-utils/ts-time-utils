{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import timekeeper from \"timekeeper\";\n\n/**\n * Executes the given function, freezing the time first to the given `time`, and resetting the function execution (uses `timekeeper`)\n *\n * ```typescript\n * // assume now is \"2019-03-21T12:21:13.000Z\"\n *\n * function renderTime() {\n *   const d = new Date()\n *   console.log(d.toISOString())\n * }\n *\n * renderTime() // => logs \"2019-03-21T12:21:13.000Z\"\n *\n * const time = new Date(\"2018-01-02T13:14:15.123Z\")\n * const res = freezeTime(time, () => { renderTime(); return 'blah' }) // => logs \"2018-01-02T13:14:15.123Z\"\n * console.log(res) // => logs 'blah' (freezeTime() returns the result of the passed function)\n *\n * renderTime() // => logs \"2019-03-21T12:21:13.010Z\" (time is unfrozen, let's say that a 10ms have passed)\n * ```\n *\n * @param time the time that will be the new \"now\"\n * @param fn function to execute, on which the time will be frozen as `time`\n */\nexport function freezeTime<T>(time: Date, fn: () => T): T {\n  timekeeper.freeze(time);\n\n  try {\n    const result = fn();\n    timekeeper.reset();\n    return result;\n  } catch (e) {\n    timekeeper.reset();\n    throw e;\n  }\n}\n\n/**\n * same as `freezeTime()` but it expects an async function. It will await for the function's return and return it before resetting the time\n *\n * TODO: this needs concurrency testing\n *\n * @param time the time that will be the new \"now\"\n * @param fn async function to execute, on which the time will be frozen as `time`\n * @see freezeTime\n */\nexport async function freezeTimeAwait<T>(time: Date, fn: () => Promise<T>): Promise<T> {\n  timekeeper.freeze(time);\n\n  try {\n    const result = await fn();\n    timekeeper.reset();\n    return result;\n  } catch (e) {\n    timekeeper.reset();\n    throw e;\n  }\n}\n"],"mappings":";AAAA,OAAO,gBAAgB;AAyBhB,SAAS,WAAc,MAAY,IAAgB;AACxD,aAAW,OAAO,IAAI;AAEtB,MAAI;AACF,UAAM,SAAS,GAAG;AAClB,eAAW,MAAM;AACjB,WAAO;AAAA,EACT,SAAS,GAAG;AACV,eAAW,MAAM;AACjB,UAAM;AAAA,EACR;AACF;AAWA,eAAsB,gBAAmB,MAAY,IAAkC;AACrF,aAAW,OAAO,IAAI;AAEtB,MAAI;AACF,UAAM,SAAS,MAAM,GAAG;AACxB,eAAW,MAAM;AACjB,WAAO;AAAA,EACT,SAAS,GAAG;AACV,eAAW,MAAM;AACjB,UAAM;AAAA,EACR;AACF;","names":[]}